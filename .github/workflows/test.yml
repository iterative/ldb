name: Tests

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: set up python 3.9
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: venv cache
        id: venv-cache
        uses: actions/cache@v2
        with:
          path: ./venv
          key: ${{ runner.os }}-python${{ steps.setup-python.outputs.python-version }}-venv-lint-${{ hashFiles('setup.cfg') }}
      - name: install dependencies
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv ./venv
          source ./venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install '.[lint]'
      - name: run linters
        run: |
          source ./venv/bin/activate
          SKIP=no-commit-to-branch pre-commit run -a --show-diff-on-failure

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        python-version: [3.7, 3.8, 3.9]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: venv cache
        id: venv-cache
        uses: actions/cache@v2
        with:
          path: ./venv
          key: ${{ runner.os }}-python${{ steps.setup-python.outputs.python-version }}-venv-test-${{ hashFiles('setup.cfg') }}
      - name: install dependencies
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv ./venv
          source ./venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install '.[test-setup,test]'
      - name: test data cache
        id: test-data-cache
        uses: actions/cache@v2
        with:
          path: ./data
          key: test-data-${{ hashFiles('data.dvc') }}
      - name: download test data
        if: steps.test-data-cache.outputs.cache-hit != 'true'
        run: |
          source ./venv/bin/activate
          dvc pull
      - name: run tests
        run: |
          source ./venv/bin/activate
          pytest
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: set up python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build twine
      - name: build package
        run: |
          rm -rf dist/
          python -m build --outdir=dist/
          twine check dist/*
      - name: upload to GitHub
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
            dist/*
      - name: upload to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          verbose: true
          verify_metadata: false
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/
